// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/obutora/med_supply_info/ent/medsupply"
)

// MedSupplyCreate is the builder for creating a MedSupply entity.
type MedSupplyCreate struct {
	config
	mutation *MedSupplyMutation
	hooks    []Hook
}

// SetDoseForm sets the "dose_form" field.
func (msc *MedSupplyCreate) SetDoseForm(s string) *MedSupplyCreate {
	msc.mutation.SetDoseForm(s)
	return msc
}

// SetGenericName sets the "generic_name" field.
func (msc *MedSupplyCreate) SetGenericName(s string) *MedSupplyCreate {
	msc.mutation.SetGenericName(s)
	return msc
}

// SetUnit sets the "unit" field.
func (msc *MedSupplyCreate) SetUnit(s string) *MedSupplyCreate {
	msc.mutation.SetUnit(s)
	return msc
}

// SetYjCode sets the "yj_code" field.
func (msc *MedSupplyCreate) SetYjCode(s string) *MedSupplyCreate {
	msc.mutation.SetYjCode(s)
	return msc
}

// SetYjBase sets the "yj_base" field.
func (msc *MedSupplyCreate) SetYjBase(i int) *MedSupplyCreate {
	msc.mutation.SetYjBase(i)
	return msc
}

// SetMaker sets the "maker" field.
func (msc *MedSupplyCreate) SetMaker(s string) *MedSupplyCreate {
	msc.mutation.SetMaker(s)
	return msc
}

// SetBrandName sets the "brand_name" field.
func (msc *MedSupplyCreate) SetBrandName(s string) *MedSupplyCreate {
	msc.mutation.SetBrandName(s)
	return msc
}

// SetSalesCategory sets the "sales_category" field.
func (msc *MedSupplyCreate) SetSalesCategory(s string) *MedSupplyCreate {
	msc.mutation.SetSalesCategory(s)
	return msc
}

// SetShipmentStatus sets the "shipment_status" field.
func (msc *MedSupplyCreate) SetShipmentStatus(s string) *MedSupplyCreate {
	msc.mutation.SetShipmentStatus(s)
	return msc
}

// SetSupplyStatus sets the "supply_status" field.
func (msc *MedSupplyCreate) SetSupplyStatus(s string) *MedSupplyCreate {
	msc.mutation.SetSupplyStatus(s)
	return msc
}

// SetExpectLiftingStatus sets the "expect_lifting_status" field.
func (msc *MedSupplyCreate) SetExpectLiftingStatus(s string) *MedSupplyCreate {
	msc.mutation.SetExpectLiftingStatus(s)
	return msc
}

// SetExpectLiftingDescription sets the "expect_lifting_description" field.
func (msc *MedSupplyCreate) SetExpectLiftingDescription(s string) *MedSupplyCreate {
	msc.mutation.SetExpectLiftingDescription(s)
	return msc
}

// SetReason sets the "reason" field.
func (msc *MedSupplyCreate) SetReason(s string) *MedSupplyCreate {
	msc.mutation.SetReason(s)
	return msc
}

// SetUpdatedAt sets the "updated_at" field.
func (msc *MedSupplyCreate) SetUpdatedAt(t time.Time) *MedSupplyCreate {
	msc.mutation.SetUpdatedAt(t)
	return msc
}

// Mutation returns the MedSupplyMutation object of the builder.
func (msc *MedSupplyCreate) Mutation() *MedSupplyMutation {
	return msc.mutation
}

// Save creates the MedSupply in the database.
func (msc *MedSupplyCreate) Save(ctx context.Context) (*MedSupply, error) {
	return withHooks(ctx, msc.sqlSave, msc.mutation, msc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (msc *MedSupplyCreate) SaveX(ctx context.Context) *MedSupply {
	v, err := msc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (msc *MedSupplyCreate) Exec(ctx context.Context) error {
	_, err := msc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (msc *MedSupplyCreate) ExecX(ctx context.Context) {
	if err := msc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (msc *MedSupplyCreate) check() error {
	if _, ok := msc.mutation.DoseForm(); !ok {
		return &ValidationError{Name: "dose_form", err: errors.New(`ent: missing required field "MedSupply.dose_form"`)}
	}
	if _, ok := msc.mutation.GenericName(); !ok {
		return &ValidationError{Name: "generic_name", err: errors.New(`ent: missing required field "MedSupply.generic_name"`)}
	}
	if _, ok := msc.mutation.Unit(); !ok {
		return &ValidationError{Name: "unit", err: errors.New(`ent: missing required field "MedSupply.unit"`)}
	}
	if _, ok := msc.mutation.YjCode(); !ok {
		return &ValidationError{Name: "yj_code", err: errors.New(`ent: missing required field "MedSupply.yj_code"`)}
	}
	if _, ok := msc.mutation.YjBase(); !ok {
		return &ValidationError{Name: "yj_base", err: errors.New(`ent: missing required field "MedSupply.yj_base"`)}
	}
	if _, ok := msc.mutation.Maker(); !ok {
		return &ValidationError{Name: "maker", err: errors.New(`ent: missing required field "MedSupply.maker"`)}
	}
	if _, ok := msc.mutation.BrandName(); !ok {
		return &ValidationError{Name: "brand_name", err: errors.New(`ent: missing required field "MedSupply.brand_name"`)}
	}
	if _, ok := msc.mutation.SalesCategory(); !ok {
		return &ValidationError{Name: "sales_category", err: errors.New(`ent: missing required field "MedSupply.sales_category"`)}
	}
	if _, ok := msc.mutation.ShipmentStatus(); !ok {
		return &ValidationError{Name: "shipment_status", err: errors.New(`ent: missing required field "MedSupply.shipment_status"`)}
	}
	if _, ok := msc.mutation.SupplyStatus(); !ok {
		return &ValidationError{Name: "supply_status", err: errors.New(`ent: missing required field "MedSupply.supply_status"`)}
	}
	if _, ok := msc.mutation.ExpectLiftingStatus(); !ok {
		return &ValidationError{Name: "expect_lifting_status", err: errors.New(`ent: missing required field "MedSupply.expect_lifting_status"`)}
	}
	if _, ok := msc.mutation.ExpectLiftingDescription(); !ok {
		return &ValidationError{Name: "expect_lifting_description", err: errors.New(`ent: missing required field "MedSupply.expect_lifting_description"`)}
	}
	if _, ok := msc.mutation.Reason(); !ok {
		return &ValidationError{Name: "reason", err: errors.New(`ent: missing required field "MedSupply.reason"`)}
	}
	if _, ok := msc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "MedSupply.updated_at"`)}
	}
	return nil
}

func (msc *MedSupplyCreate) sqlSave(ctx context.Context) (*MedSupply, error) {
	if err := msc.check(); err != nil {
		return nil, err
	}
	_node, _spec := msc.createSpec()
	if err := sqlgraph.CreateNode(ctx, msc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	msc.mutation.id = &_node.ID
	msc.mutation.done = true
	return _node, nil
}

func (msc *MedSupplyCreate) createSpec() (*MedSupply, *sqlgraph.CreateSpec) {
	var (
		_node = &MedSupply{config: msc.config}
		_spec = sqlgraph.NewCreateSpec(medsupply.Table, sqlgraph.NewFieldSpec(medsupply.FieldID, field.TypeInt))
	)
	if value, ok := msc.mutation.DoseForm(); ok {
		_spec.SetField(medsupply.FieldDoseForm, field.TypeString, value)
		_node.DoseForm = value
	}
	if value, ok := msc.mutation.GenericName(); ok {
		_spec.SetField(medsupply.FieldGenericName, field.TypeString, value)
		_node.GenericName = value
	}
	if value, ok := msc.mutation.Unit(); ok {
		_spec.SetField(medsupply.FieldUnit, field.TypeString, value)
		_node.Unit = value
	}
	if value, ok := msc.mutation.YjCode(); ok {
		_spec.SetField(medsupply.FieldYjCode, field.TypeString, value)
		_node.YjCode = value
	}
	if value, ok := msc.mutation.YjBase(); ok {
		_spec.SetField(medsupply.FieldYjBase, field.TypeInt, value)
		_node.YjBase = value
	}
	if value, ok := msc.mutation.Maker(); ok {
		_spec.SetField(medsupply.FieldMaker, field.TypeString, value)
		_node.Maker = value
	}
	if value, ok := msc.mutation.BrandName(); ok {
		_spec.SetField(medsupply.FieldBrandName, field.TypeString, value)
		_node.BrandName = value
	}
	if value, ok := msc.mutation.SalesCategory(); ok {
		_spec.SetField(medsupply.FieldSalesCategory, field.TypeString, value)
		_node.SalesCategory = value
	}
	if value, ok := msc.mutation.ShipmentStatus(); ok {
		_spec.SetField(medsupply.FieldShipmentStatus, field.TypeString, value)
		_node.ShipmentStatus = value
	}
	if value, ok := msc.mutation.SupplyStatus(); ok {
		_spec.SetField(medsupply.FieldSupplyStatus, field.TypeString, value)
		_node.SupplyStatus = value
	}
	if value, ok := msc.mutation.ExpectLiftingStatus(); ok {
		_spec.SetField(medsupply.FieldExpectLiftingStatus, field.TypeString, value)
		_node.ExpectLiftingStatus = value
	}
	if value, ok := msc.mutation.ExpectLiftingDescription(); ok {
		_spec.SetField(medsupply.FieldExpectLiftingDescription, field.TypeString, value)
		_node.ExpectLiftingDescription = value
	}
	if value, ok := msc.mutation.Reason(); ok {
		_spec.SetField(medsupply.FieldReason, field.TypeString, value)
		_node.Reason = value
	}
	if value, ok := msc.mutation.UpdatedAt(); ok {
		_spec.SetField(medsupply.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// MedSupplyCreateBulk is the builder for creating many MedSupply entities in bulk.
type MedSupplyCreateBulk struct {
	config
	err      error
	builders []*MedSupplyCreate
}

// Save creates the MedSupply entities in the database.
func (mscb *MedSupplyCreateBulk) Save(ctx context.Context) ([]*MedSupply, error) {
	if mscb.err != nil {
		return nil, mscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mscb.builders))
	nodes := make([]*MedSupply, len(mscb.builders))
	mutators := make([]Mutator, len(mscb.builders))
	for i := range mscb.builders {
		func(i int, root context.Context) {
			builder := mscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MedSupplyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mscb *MedSupplyCreateBulk) SaveX(ctx context.Context) []*MedSupply {
	v, err := mscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mscb *MedSupplyCreateBulk) Exec(ctx context.Context) error {
	_, err := mscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mscb *MedSupplyCreateBulk) ExecX(ctx context.Context) {
	if err := mscb.Exec(ctx); err != nil {
		panic(err)
	}
}
