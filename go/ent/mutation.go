// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/obutora/med_supply_info/ent/medmaker"
	"github.com/obutora/med_supply_info/ent/medsupply"
	"github.com/obutora/med_supply_info/ent/predicate"
	"github.com/obutora/med_supply_info/ent/todo"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeMedMaker  = "MedMaker"
	TypeMedSupply = "MedSupply"
	TypeTodo      = "Todo"
)

// MedMakerMutation represents an operation that mutates the MedMaker nodes in the graph.
type MedMakerMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	url           *string
	favicon_url   *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*MedMaker, error)
	predicates    []predicate.MedMaker
}

var _ ent.Mutation = (*MedMakerMutation)(nil)

// medmakerOption allows management of the mutation configuration using functional options.
type medmakerOption func(*MedMakerMutation)

// newMedMakerMutation creates new mutation for the MedMaker entity.
func newMedMakerMutation(c config, op Op, opts ...medmakerOption) *MedMakerMutation {
	m := &MedMakerMutation{
		config:        c,
		op:            op,
		typ:           TypeMedMaker,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMedMakerID sets the ID field of the mutation.
func withMedMakerID(id int) medmakerOption {
	return func(m *MedMakerMutation) {
		var (
			err   error
			once  sync.Once
			value *MedMaker
		)
		m.oldValue = func(ctx context.Context) (*MedMaker, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MedMaker.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMedMaker sets the old MedMaker of the mutation.
func withMedMaker(node *MedMaker) medmakerOption {
	return func(m *MedMakerMutation) {
		m.oldValue = func(context.Context) (*MedMaker, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MedMakerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MedMakerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MedMakerMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MedMakerMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MedMaker.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *MedMakerMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *MedMakerMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the MedMaker entity.
// If the MedMaker object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedMakerMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *MedMakerMutation) ResetName() {
	m.name = nil
}

// SetURL sets the "url" field.
func (m *MedMakerMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *MedMakerMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the MedMaker entity.
// If the MedMaker object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedMakerMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ResetURL resets all changes to the "url" field.
func (m *MedMakerMutation) ResetURL() {
	m.url = nil
}

// SetFaviconURL sets the "favicon_url" field.
func (m *MedMakerMutation) SetFaviconURL(s string) {
	m.favicon_url = &s
}

// FaviconURL returns the value of the "favicon_url" field in the mutation.
func (m *MedMakerMutation) FaviconURL() (r string, exists bool) {
	v := m.favicon_url
	if v == nil {
		return
	}
	return *v, true
}

// OldFaviconURL returns the old "favicon_url" field's value of the MedMaker entity.
// If the MedMaker object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedMakerMutation) OldFaviconURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFaviconURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFaviconURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFaviconURL: %w", err)
	}
	return oldValue.FaviconURL, nil
}

// ResetFaviconURL resets all changes to the "favicon_url" field.
func (m *MedMakerMutation) ResetFaviconURL() {
	m.favicon_url = nil
}

// Where appends a list predicates to the MedMakerMutation builder.
func (m *MedMakerMutation) Where(ps ...predicate.MedMaker) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MedMakerMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MedMakerMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.MedMaker, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MedMakerMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MedMakerMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (MedMaker).
func (m *MedMakerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MedMakerMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, medmaker.FieldName)
	}
	if m.url != nil {
		fields = append(fields, medmaker.FieldURL)
	}
	if m.favicon_url != nil {
		fields = append(fields, medmaker.FieldFaviconURL)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MedMakerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case medmaker.FieldName:
		return m.Name()
	case medmaker.FieldURL:
		return m.URL()
	case medmaker.FieldFaviconURL:
		return m.FaviconURL()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MedMakerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case medmaker.FieldName:
		return m.OldName(ctx)
	case medmaker.FieldURL:
		return m.OldURL(ctx)
	case medmaker.FieldFaviconURL:
		return m.OldFaviconURL(ctx)
	}
	return nil, fmt.Errorf("unknown MedMaker field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MedMakerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case medmaker.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case medmaker.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case medmaker.FieldFaviconURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFaviconURL(v)
		return nil
	}
	return fmt.Errorf("unknown MedMaker field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MedMakerMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MedMakerMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MedMakerMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown MedMaker numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MedMakerMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MedMakerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MedMakerMutation) ClearField(name string) error {
	return fmt.Errorf("unknown MedMaker nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MedMakerMutation) ResetField(name string) error {
	switch name {
	case medmaker.FieldName:
		m.ResetName()
		return nil
	case medmaker.FieldURL:
		m.ResetURL()
		return nil
	case medmaker.FieldFaviconURL:
		m.ResetFaviconURL()
		return nil
	}
	return fmt.Errorf("unknown MedMaker field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MedMakerMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MedMakerMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MedMakerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MedMakerMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MedMakerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MedMakerMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MedMakerMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown MedMaker unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MedMakerMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown MedMaker edge %s", name)
}

// MedSupplyMutation represents an operation that mutates the MedSupply nodes in the graph.
type MedSupplyMutation struct {
	config
	op                         Op
	typ                        string
	id                         *int
	dose_form                  *string
	generic_name               *string
	unit                       *string
	yj_code                    *string
	yj_base                    *int
	addyj_base                 *int
	maker                      *string
	brand_name                 *string
	sales_category             *string
	shipment_status            *string
	supply_status              *string
	expect_lifting_status      *string
	expect_lifting_description *string
	reason                     *string
	updated_at                 *time.Time
	clearedFields              map[string]struct{}
	done                       bool
	oldValue                   func(context.Context) (*MedSupply, error)
	predicates                 []predicate.MedSupply
}

var _ ent.Mutation = (*MedSupplyMutation)(nil)

// medsupplyOption allows management of the mutation configuration using functional options.
type medsupplyOption func(*MedSupplyMutation)

// newMedSupplyMutation creates new mutation for the MedSupply entity.
func newMedSupplyMutation(c config, op Op, opts ...medsupplyOption) *MedSupplyMutation {
	m := &MedSupplyMutation{
		config:        c,
		op:            op,
		typ:           TypeMedSupply,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMedSupplyID sets the ID field of the mutation.
func withMedSupplyID(id int) medsupplyOption {
	return func(m *MedSupplyMutation) {
		var (
			err   error
			once  sync.Once
			value *MedSupply
		)
		m.oldValue = func(ctx context.Context) (*MedSupply, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MedSupply.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMedSupply sets the old MedSupply of the mutation.
func withMedSupply(node *MedSupply) medsupplyOption {
	return func(m *MedSupplyMutation) {
		m.oldValue = func(context.Context) (*MedSupply, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MedSupplyMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MedSupplyMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MedSupplyMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MedSupplyMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MedSupply.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDoseForm sets the "dose_form" field.
func (m *MedSupplyMutation) SetDoseForm(s string) {
	m.dose_form = &s
}

// DoseForm returns the value of the "dose_form" field in the mutation.
func (m *MedSupplyMutation) DoseForm() (r string, exists bool) {
	v := m.dose_form
	if v == nil {
		return
	}
	return *v, true
}

// OldDoseForm returns the old "dose_form" field's value of the MedSupply entity.
// If the MedSupply object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedSupplyMutation) OldDoseForm(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDoseForm is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDoseForm requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDoseForm: %w", err)
	}
	return oldValue.DoseForm, nil
}

// ResetDoseForm resets all changes to the "dose_form" field.
func (m *MedSupplyMutation) ResetDoseForm() {
	m.dose_form = nil
}

// SetGenericName sets the "generic_name" field.
func (m *MedSupplyMutation) SetGenericName(s string) {
	m.generic_name = &s
}

// GenericName returns the value of the "generic_name" field in the mutation.
func (m *MedSupplyMutation) GenericName() (r string, exists bool) {
	v := m.generic_name
	if v == nil {
		return
	}
	return *v, true
}

// OldGenericName returns the old "generic_name" field's value of the MedSupply entity.
// If the MedSupply object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedSupplyMutation) OldGenericName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGenericName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGenericName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGenericName: %w", err)
	}
	return oldValue.GenericName, nil
}

// ResetGenericName resets all changes to the "generic_name" field.
func (m *MedSupplyMutation) ResetGenericName() {
	m.generic_name = nil
}

// SetUnit sets the "unit" field.
func (m *MedSupplyMutation) SetUnit(s string) {
	m.unit = &s
}

// Unit returns the value of the "unit" field in the mutation.
func (m *MedSupplyMutation) Unit() (r string, exists bool) {
	v := m.unit
	if v == nil {
		return
	}
	return *v, true
}

// OldUnit returns the old "unit" field's value of the MedSupply entity.
// If the MedSupply object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedSupplyMutation) OldUnit(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUnit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUnit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUnit: %w", err)
	}
	return oldValue.Unit, nil
}

// ResetUnit resets all changes to the "unit" field.
func (m *MedSupplyMutation) ResetUnit() {
	m.unit = nil
}

// SetYjCode sets the "yj_code" field.
func (m *MedSupplyMutation) SetYjCode(s string) {
	m.yj_code = &s
}

// YjCode returns the value of the "yj_code" field in the mutation.
func (m *MedSupplyMutation) YjCode() (r string, exists bool) {
	v := m.yj_code
	if v == nil {
		return
	}
	return *v, true
}

// OldYjCode returns the old "yj_code" field's value of the MedSupply entity.
// If the MedSupply object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedSupplyMutation) OldYjCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldYjCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldYjCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldYjCode: %w", err)
	}
	return oldValue.YjCode, nil
}

// ResetYjCode resets all changes to the "yj_code" field.
func (m *MedSupplyMutation) ResetYjCode() {
	m.yj_code = nil
}

// SetYjBase sets the "yj_base" field.
func (m *MedSupplyMutation) SetYjBase(i int) {
	m.yj_base = &i
	m.addyj_base = nil
}

// YjBase returns the value of the "yj_base" field in the mutation.
func (m *MedSupplyMutation) YjBase() (r int, exists bool) {
	v := m.yj_base
	if v == nil {
		return
	}
	return *v, true
}

// OldYjBase returns the old "yj_base" field's value of the MedSupply entity.
// If the MedSupply object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedSupplyMutation) OldYjBase(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldYjBase is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldYjBase requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldYjBase: %w", err)
	}
	return oldValue.YjBase, nil
}

// AddYjBase adds i to the "yj_base" field.
func (m *MedSupplyMutation) AddYjBase(i int) {
	if m.addyj_base != nil {
		*m.addyj_base += i
	} else {
		m.addyj_base = &i
	}
}

// AddedYjBase returns the value that was added to the "yj_base" field in this mutation.
func (m *MedSupplyMutation) AddedYjBase() (r int, exists bool) {
	v := m.addyj_base
	if v == nil {
		return
	}
	return *v, true
}

// ResetYjBase resets all changes to the "yj_base" field.
func (m *MedSupplyMutation) ResetYjBase() {
	m.yj_base = nil
	m.addyj_base = nil
}

// SetMaker sets the "maker" field.
func (m *MedSupplyMutation) SetMaker(s string) {
	m.maker = &s
}

// Maker returns the value of the "maker" field in the mutation.
func (m *MedSupplyMutation) Maker() (r string, exists bool) {
	v := m.maker
	if v == nil {
		return
	}
	return *v, true
}

// OldMaker returns the old "maker" field's value of the MedSupply entity.
// If the MedSupply object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedSupplyMutation) OldMaker(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMaker is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMaker requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMaker: %w", err)
	}
	return oldValue.Maker, nil
}

// ResetMaker resets all changes to the "maker" field.
func (m *MedSupplyMutation) ResetMaker() {
	m.maker = nil
}

// SetBrandName sets the "brand_name" field.
func (m *MedSupplyMutation) SetBrandName(s string) {
	m.brand_name = &s
}

// BrandName returns the value of the "brand_name" field in the mutation.
func (m *MedSupplyMutation) BrandName() (r string, exists bool) {
	v := m.brand_name
	if v == nil {
		return
	}
	return *v, true
}

// OldBrandName returns the old "brand_name" field's value of the MedSupply entity.
// If the MedSupply object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedSupplyMutation) OldBrandName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBrandName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBrandName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBrandName: %w", err)
	}
	return oldValue.BrandName, nil
}

// ResetBrandName resets all changes to the "brand_name" field.
func (m *MedSupplyMutation) ResetBrandName() {
	m.brand_name = nil
}

// SetSalesCategory sets the "sales_category" field.
func (m *MedSupplyMutation) SetSalesCategory(s string) {
	m.sales_category = &s
}

// SalesCategory returns the value of the "sales_category" field in the mutation.
func (m *MedSupplyMutation) SalesCategory() (r string, exists bool) {
	v := m.sales_category
	if v == nil {
		return
	}
	return *v, true
}

// OldSalesCategory returns the old "sales_category" field's value of the MedSupply entity.
// If the MedSupply object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedSupplyMutation) OldSalesCategory(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSalesCategory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSalesCategory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSalesCategory: %w", err)
	}
	return oldValue.SalesCategory, nil
}

// ResetSalesCategory resets all changes to the "sales_category" field.
func (m *MedSupplyMutation) ResetSalesCategory() {
	m.sales_category = nil
}

// SetShipmentStatus sets the "shipment_status" field.
func (m *MedSupplyMutation) SetShipmentStatus(s string) {
	m.shipment_status = &s
}

// ShipmentStatus returns the value of the "shipment_status" field in the mutation.
func (m *MedSupplyMutation) ShipmentStatus() (r string, exists bool) {
	v := m.shipment_status
	if v == nil {
		return
	}
	return *v, true
}

// OldShipmentStatus returns the old "shipment_status" field's value of the MedSupply entity.
// If the MedSupply object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedSupplyMutation) OldShipmentStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShipmentStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShipmentStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShipmentStatus: %w", err)
	}
	return oldValue.ShipmentStatus, nil
}

// ResetShipmentStatus resets all changes to the "shipment_status" field.
func (m *MedSupplyMutation) ResetShipmentStatus() {
	m.shipment_status = nil
}

// SetSupplyStatus sets the "supply_status" field.
func (m *MedSupplyMutation) SetSupplyStatus(s string) {
	m.supply_status = &s
}

// SupplyStatus returns the value of the "supply_status" field in the mutation.
func (m *MedSupplyMutation) SupplyStatus() (r string, exists bool) {
	v := m.supply_status
	if v == nil {
		return
	}
	return *v, true
}

// OldSupplyStatus returns the old "supply_status" field's value of the MedSupply entity.
// If the MedSupply object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedSupplyMutation) OldSupplyStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSupplyStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSupplyStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSupplyStatus: %w", err)
	}
	return oldValue.SupplyStatus, nil
}

// ResetSupplyStatus resets all changes to the "supply_status" field.
func (m *MedSupplyMutation) ResetSupplyStatus() {
	m.supply_status = nil
}

// SetExpectLiftingStatus sets the "expect_lifting_status" field.
func (m *MedSupplyMutation) SetExpectLiftingStatus(s string) {
	m.expect_lifting_status = &s
}

// ExpectLiftingStatus returns the value of the "expect_lifting_status" field in the mutation.
func (m *MedSupplyMutation) ExpectLiftingStatus() (r string, exists bool) {
	v := m.expect_lifting_status
	if v == nil {
		return
	}
	return *v, true
}

// OldExpectLiftingStatus returns the old "expect_lifting_status" field's value of the MedSupply entity.
// If the MedSupply object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedSupplyMutation) OldExpectLiftingStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpectLiftingStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpectLiftingStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpectLiftingStatus: %w", err)
	}
	return oldValue.ExpectLiftingStatus, nil
}

// ResetExpectLiftingStatus resets all changes to the "expect_lifting_status" field.
func (m *MedSupplyMutation) ResetExpectLiftingStatus() {
	m.expect_lifting_status = nil
}

// SetExpectLiftingDescription sets the "expect_lifting_description" field.
func (m *MedSupplyMutation) SetExpectLiftingDescription(s string) {
	m.expect_lifting_description = &s
}

// ExpectLiftingDescription returns the value of the "expect_lifting_description" field in the mutation.
func (m *MedSupplyMutation) ExpectLiftingDescription() (r string, exists bool) {
	v := m.expect_lifting_description
	if v == nil {
		return
	}
	return *v, true
}

// OldExpectLiftingDescription returns the old "expect_lifting_description" field's value of the MedSupply entity.
// If the MedSupply object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedSupplyMutation) OldExpectLiftingDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpectLiftingDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpectLiftingDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpectLiftingDescription: %w", err)
	}
	return oldValue.ExpectLiftingDescription, nil
}

// ResetExpectLiftingDescription resets all changes to the "expect_lifting_description" field.
func (m *MedSupplyMutation) ResetExpectLiftingDescription() {
	m.expect_lifting_description = nil
}

// SetReason sets the "reason" field.
func (m *MedSupplyMutation) SetReason(s string) {
	m.reason = &s
}

// Reason returns the value of the "reason" field in the mutation.
func (m *MedSupplyMutation) Reason() (r string, exists bool) {
	v := m.reason
	if v == nil {
		return
	}
	return *v, true
}

// OldReason returns the old "reason" field's value of the MedSupply entity.
// If the MedSupply object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedSupplyMutation) OldReason(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReason is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReason requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReason: %w", err)
	}
	return oldValue.Reason, nil
}

// ResetReason resets all changes to the "reason" field.
func (m *MedSupplyMutation) ResetReason() {
	m.reason = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *MedSupplyMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *MedSupplyMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the MedSupply entity.
// If the MedSupply object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedSupplyMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *MedSupplyMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// Where appends a list predicates to the MedSupplyMutation builder.
func (m *MedSupplyMutation) Where(ps ...predicate.MedSupply) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MedSupplyMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MedSupplyMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.MedSupply, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MedSupplyMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MedSupplyMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (MedSupply).
func (m *MedSupplyMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MedSupplyMutation) Fields() []string {
	fields := make([]string, 0, 14)
	if m.dose_form != nil {
		fields = append(fields, medsupply.FieldDoseForm)
	}
	if m.generic_name != nil {
		fields = append(fields, medsupply.FieldGenericName)
	}
	if m.unit != nil {
		fields = append(fields, medsupply.FieldUnit)
	}
	if m.yj_code != nil {
		fields = append(fields, medsupply.FieldYjCode)
	}
	if m.yj_base != nil {
		fields = append(fields, medsupply.FieldYjBase)
	}
	if m.maker != nil {
		fields = append(fields, medsupply.FieldMaker)
	}
	if m.brand_name != nil {
		fields = append(fields, medsupply.FieldBrandName)
	}
	if m.sales_category != nil {
		fields = append(fields, medsupply.FieldSalesCategory)
	}
	if m.shipment_status != nil {
		fields = append(fields, medsupply.FieldShipmentStatus)
	}
	if m.supply_status != nil {
		fields = append(fields, medsupply.FieldSupplyStatus)
	}
	if m.expect_lifting_status != nil {
		fields = append(fields, medsupply.FieldExpectLiftingStatus)
	}
	if m.expect_lifting_description != nil {
		fields = append(fields, medsupply.FieldExpectLiftingDescription)
	}
	if m.reason != nil {
		fields = append(fields, medsupply.FieldReason)
	}
	if m.updated_at != nil {
		fields = append(fields, medsupply.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MedSupplyMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case medsupply.FieldDoseForm:
		return m.DoseForm()
	case medsupply.FieldGenericName:
		return m.GenericName()
	case medsupply.FieldUnit:
		return m.Unit()
	case medsupply.FieldYjCode:
		return m.YjCode()
	case medsupply.FieldYjBase:
		return m.YjBase()
	case medsupply.FieldMaker:
		return m.Maker()
	case medsupply.FieldBrandName:
		return m.BrandName()
	case medsupply.FieldSalesCategory:
		return m.SalesCategory()
	case medsupply.FieldShipmentStatus:
		return m.ShipmentStatus()
	case medsupply.FieldSupplyStatus:
		return m.SupplyStatus()
	case medsupply.FieldExpectLiftingStatus:
		return m.ExpectLiftingStatus()
	case medsupply.FieldExpectLiftingDescription:
		return m.ExpectLiftingDescription()
	case medsupply.FieldReason:
		return m.Reason()
	case medsupply.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MedSupplyMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case medsupply.FieldDoseForm:
		return m.OldDoseForm(ctx)
	case medsupply.FieldGenericName:
		return m.OldGenericName(ctx)
	case medsupply.FieldUnit:
		return m.OldUnit(ctx)
	case medsupply.FieldYjCode:
		return m.OldYjCode(ctx)
	case medsupply.FieldYjBase:
		return m.OldYjBase(ctx)
	case medsupply.FieldMaker:
		return m.OldMaker(ctx)
	case medsupply.FieldBrandName:
		return m.OldBrandName(ctx)
	case medsupply.FieldSalesCategory:
		return m.OldSalesCategory(ctx)
	case medsupply.FieldShipmentStatus:
		return m.OldShipmentStatus(ctx)
	case medsupply.FieldSupplyStatus:
		return m.OldSupplyStatus(ctx)
	case medsupply.FieldExpectLiftingStatus:
		return m.OldExpectLiftingStatus(ctx)
	case medsupply.FieldExpectLiftingDescription:
		return m.OldExpectLiftingDescription(ctx)
	case medsupply.FieldReason:
		return m.OldReason(ctx)
	case medsupply.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown MedSupply field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MedSupplyMutation) SetField(name string, value ent.Value) error {
	switch name {
	case medsupply.FieldDoseForm:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDoseForm(v)
		return nil
	case medsupply.FieldGenericName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGenericName(v)
		return nil
	case medsupply.FieldUnit:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUnit(v)
		return nil
	case medsupply.FieldYjCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetYjCode(v)
		return nil
	case medsupply.FieldYjBase:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetYjBase(v)
		return nil
	case medsupply.FieldMaker:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMaker(v)
		return nil
	case medsupply.FieldBrandName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBrandName(v)
		return nil
	case medsupply.FieldSalesCategory:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSalesCategory(v)
		return nil
	case medsupply.FieldShipmentStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShipmentStatus(v)
		return nil
	case medsupply.FieldSupplyStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSupplyStatus(v)
		return nil
	case medsupply.FieldExpectLiftingStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpectLiftingStatus(v)
		return nil
	case medsupply.FieldExpectLiftingDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpectLiftingDescription(v)
		return nil
	case medsupply.FieldReason:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReason(v)
		return nil
	case medsupply.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown MedSupply field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MedSupplyMutation) AddedFields() []string {
	var fields []string
	if m.addyj_base != nil {
		fields = append(fields, medsupply.FieldYjBase)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MedSupplyMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case medsupply.FieldYjBase:
		return m.AddedYjBase()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MedSupplyMutation) AddField(name string, value ent.Value) error {
	switch name {
	case medsupply.FieldYjBase:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddYjBase(v)
		return nil
	}
	return fmt.Errorf("unknown MedSupply numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MedSupplyMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MedSupplyMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MedSupplyMutation) ClearField(name string) error {
	return fmt.Errorf("unknown MedSupply nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MedSupplyMutation) ResetField(name string) error {
	switch name {
	case medsupply.FieldDoseForm:
		m.ResetDoseForm()
		return nil
	case medsupply.FieldGenericName:
		m.ResetGenericName()
		return nil
	case medsupply.FieldUnit:
		m.ResetUnit()
		return nil
	case medsupply.FieldYjCode:
		m.ResetYjCode()
		return nil
	case medsupply.FieldYjBase:
		m.ResetYjBase()
		return nil
	case medsupply.FieldMaker:
		m.ResetMaker()
		return nil
	case medsupply.FieldBrandName:
		m.ResetBrandName()
		return nil
	case medsupply.FieldSalesCategory:
		m.ResetSalesCategory()
		return nil
	case medsupply.FieldShipmentStatus:
		m.ResetShipmentStatus()
		return nil
	case medsupply.FieldSupplyStatus:
		m.ResetSupplyStatus()
		return nil
	case medsupply.FieldExpectLiftingStatus:
		m.ResetExpectLiftingStatus()
		return nil
	case medsupply.FieldExpectLiftingDescription:
		m.ResetExpectLiftingDescription()
		return nil
	case medsupply.FieldReason:
		m.ResetReason()
		return nil
	case medsupply.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown MedSupply field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MedSupplyMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MedSupplyMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MedSupplyMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MedSupplyMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MedSupplyMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MedSupplyMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MedSupplyMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown MedSupply unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MedSupplyMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown MedSupply edge %s", name)
}

// TodoMutation represents an operation that mutates the Todo nodes in the graph.
type TodoMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	value         *int
	addvalue      *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Todo, error)
	predicates    []predicate.Todo
}

var _ ent.Mutation = (*TodoMutation)(nil)

// todoOption allows management of the mutation configuration using functional options.
type todoOption func(*TodoMutation)

// newTodoMutation creates new mutation for the Todo entity.
func newTodoMutation(c config, op Op, opts ...todoOption) *TodoMutation {
	m := &TodoMutation{
		config:        c,
		op:            op,
		typ:           TypeTodo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTodoID sets the ID field of the mutation.
func withTodoID(id int) todoOption {
	return func(m *TodoMutation) {
		var (
			err   error
			once  sync.Once
			value *Todo
		)
		m.oldValue = func(ctx context.Context) (*Todo, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Todo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTodo sets the old Todo of the mutation.
func withTodo(node *Todo) todoOption {
	return func(m *TodoMutation) {
		m.oldValue = func(context.Context) (*Todo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TodoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TodoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TodoMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TodoMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Todo.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *TodoMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TodoMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Todo entity.
// If the Todo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TodoMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TodoMutation) ResetName() {
	m.name = nil
}

// SetValue sets the "value" field.
func (m *TodoMutation) SetValue(i int) {
	m.value = &i
	m.addvalue = nil
}

// Value returns the value of the "value" field in the mutation.
func (m *TodoMutation) Value() (r int, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the Todo entity.
// If the Todo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TodoMutation) OldValue(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// AddValue adds i to the "value" field.
func (m *TodoMutation) AddValue(i int) {
	if m.addvalue != nil {
		*m.addvalue += i
	} else {
		m.addvalue = &i
	}
}

// AddedValue returns the value that was added to the "value" field in this mutation.
func (m *TodoMutation) AddedValue() (r int, exists bool) {
	v := m.addvalue
	if v == nil {
		return
	}
	return *v, true
}

// ResetValue resets all changes to the "value" field.
func (m *TodoMutation) ResetValue() {
	m.value = nil
	m.addvalue = nil
}

// Where appends a list predicates to the TodoMutation builder.
func (m *TodoMutation) Where(ps ...predicate.Todo) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TodoMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TodoMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Todo, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TodoMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TodoMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Todo).
func (m *TodoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TodoMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, todo.FieldName)
	}
	if m.value != nil {
		fields = append(fields, todo.FieldValue)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TodoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case todo.FieldName:
		return m.Name()
	case todo.FieldValue:
		return m.Value()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TodoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case todo.FieldName:
		return m.OldName(ctx)
	case todo.FieldValue:
		return m.OldValue(ctx)
	}
	return nil, fmt.Errorf("unknown Todo field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TodoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case todo.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case todo.FieldValue:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	}
	return fmt.Errorf("unknown Todo field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TodoMutation) AddedFields() []string {
	var fields []string
	if m.addvalue != nil {
		fields = append(fields, todo.FieldValue)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TodoMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case todo.FieldValue:
		return m.AddedValue()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TodoMutation) AddField(name string, value ent.Value) error {
	switch name {
	case todo.FieldValue:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddValue(v)
		return nil
	}
	return fmt.Errorf("unknown Todo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TodoMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TodoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TodoMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Todo nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TodoMutation) ResetField(name string) error {
	switch name {
	case todo.FieldName:
		m.ResetName()
		return nil
	case todo.FieldValue:
		m.ResetValue()
		return nil
	}
	return fmt.Errorf("unknown Todo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TodoMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TodoMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TodoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TodoMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TodoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TodoMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TodoMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Todo unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TodoMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Todo edge %s", name)
}
