// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/obutora/med_supply_info/ent/medmaker"
	"github.com/obutora/med_supply_info/ent/predicate"
)

// MedMakerUpdate is the builder for updating MedMaker entities.
type MedMakerUpdate struct {
	config
	hooks    []Hook
	mutation *MedMakerMutation
}

// Where appends a list predicates to the MedMakerUpdate builder.
func (mmu *MedMakerUpdate) Where(ps ...predicate.MedMaker) *MedMakerUpdate {
	mmu.mutation.Where(ps...)
	return mmu
}

// SetName sets the "name" field.
func (mmu *MedMakerUpdate) SetName(s string) *MedMakerUpdate {
	mmu.mutation.SetName(s)
	return mmu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mmu *MedMakerUpdate) SetNillableName(s *string) *MedMakerUpdate {
	if s != nil {
		mmu.SetName(*s)
	}
	return mmu
}

// SetURL sets the "url" field.
func (mmu *MedMakerUpdate) SetURL(s string) *MedMakerUpdate {
	mmu.mutation.SetURL(s)
	return mmu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (mmu *MedMakerUpdate) SetNillableURL(s *string) *MedMakerUpdate {
	if s != nil {
		mmu.SetURL(*s)
	}
	return mmu
}

// SetFaviconURL sets the "favicon_url" field.
func (mmu *MedMakerUpdate) SetFaviconURL(s string) *MedMakerUpdate {
	mmu.mutation.SetFaviconURL(s)
	return mmu
}

// SetNillableFaviconURL sets the "favicon_url" field if the given value is not nil.
func (mmu *MedMakerUpdate) SetNillableFaviconURL(s *string) *MedMakerUpdate {
	if s != nil {
		mmu.SetFaviconURL(*s)
	}
	return mmu
}

// Mutation returns the MedMakerMutation object of the builder.
func (mmu *MedMakerUpdate) Mutation() *MedMakerMutation {
	return mmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mmu *MedMakerUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mmu.sqlSave, mmu.mutation, mmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mmu *MedMakerUpdate) SaveX(ctx context.Context) int {
	affected, err := mmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mmu *MedMakerUpdate) Exec(ctx context.Context) error {
	_, err := mmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mmu *MedMakerUpdate) ExecX(ctx context.Context) {
	if err := mmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mmu *MedMakerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(medmaker.Table, medmaker.Columns, sqlgraph.NewFieldSpec(medmaker.FieldID, field.TypeInt))
	if ps := mmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mmu.mutation.Name(); ok {
		_spec.SetField(medmaker.FieldName, field.TypeString, value)
	}
	if value, ok := mmu.mutation.URL(); ok {
		_spec.SetField(medmaker.FieldURL, field.TypeString, value)
	}
	if value, ok := mmu.mutation.FaviconURL(); ok {
		_spec.SetField(medmaker.FieldFaviconURL, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{medmaker.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mmu.mutation.done = true
	return n, nil
}

// MedMakerUpdateOne is the builder for updating a single MedMaker entity.
type MedMakerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MedMakerMutation
}

// SetName sets the "name" field.
func (mmuo *MedMakerUpdateOne) SetName(s string) *MedMakerUpdateOne {
	mmuo.mutation.SetName(s)
	return mmuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mmuo *MedMakerUpdateOne) SetNillableName(s *string) *MedMakerUpdateOne {
	if s != nil {
		mmuo.SetName(*s)
	}
	return mmuo
}

// SetURL sets the "url" field.
func (mmuo *MedMakerUpdateOne) SetURL(s string) *MedMakerUpdateOne {
	mmuo.mutation.SetURL(s)
	return mmuo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (mmuo *MedMakerUpdateOne) SetNillableURL(s *string) *MedMakerUpdateOne {
	if s != nil {
		mmuo.SetURL(*s)
	}
	return mmuo
}

// SetFaviconURL sets the "favicon_url" field.
func (mmuo *MedMakerUpdateOne) SetFaviconURL(s string) *MedMakerUpdateOne {
	mmuo.mutation.SetFaviconURL(s)
	return mmuo
}

// SetNillableFaviconURL sets the "favicon_url" field if the given value is not nil.
func (mmuo *MedMakerUpdateOne) SetNillableFaviconURL(s *string) *MedMakerUpdateOne {
	if s != nil {
		mmuo.SetFaviconURL(*s)
	}
	return mmuo
}

// Mutation returns the MedMakerMutation object of the builder.
func (mmuo *MedMakerUpdateOne) Mutation() *MedMakerMutation {
	return mmuo.mutation
}

// Where appends a list predicates to the MedMakerUpdate builder.
func (mmuo *MedMakerUpdateOne) Where(ps ...predicate.MedMaker) *MedMakerUpdateOne {
	mmuo.mutation.Where(ps...)
	return mmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mmuo *MedMakerUpdateOne) Select(field string, fields ...string) *MedMakerUpdateOne {
	mmuo.fields = append([]string{field}, fields...)
	return mmuo
}

// Save executes the query and returns the updated MedMaker entity.
func (mmuo *MedMakerUpdateOne) Save(ctx context.Context) (*MedMaker, error) {
	return withHooks(ctx, mmuo.sqlSave, mmuo.mutation, mmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mmuo *MedMakerUpdateOne) SaveX(ctx context.Context) *MedMaker {
	node, err := mmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mmuo *MedMakerUpdateOne) Exec(ctx context.Context) error {
	_, err := mmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mmuo *MedMakerUpdateOne) ExecX(ctx context.Context) {
	if err := mmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mmuo *MedMakerUpdateOne) sqlSave(ctx context.Context) (_node *MedMaker, err error) {
	_spec := sqlgraph.NewUpdateSpec(medmaker.Table, medmaker.Columns, sqlgraph.NewFieldSpec(medmaker.FieldID, field.TypeInt))
	id, ok := mmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MedMaker.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, medmaker.FieldID)
		for _, f := range fields {
			if !medmaker.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != medmaker.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mmuo.mutation.Name(); ok {
		_spec.SetField(medmaker.FieldName, field.TypeString, value)
	}
	if value, ok := mmuo.mutation.URL(); ok {
		_spec.SetField(medmaker.FieldURL, field.TypeString, value)
	}
	if value, ok := mmuo.mutation.FaviconURL(); ok {
		_spec.SetField(medmaker.FieldFaviconURL, field.TypeString, value)
	}
	_node = &MedMaker{config: mmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{medmaker.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mmuo.mutation.done = true
	return _node, nil
}
