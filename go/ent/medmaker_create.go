// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/obutora/med_supply_info/ent/medmaker"
)

// MedMakerCreate is the builder for creating a MedMaker entity.
type MedMakerCreate struct {
	config
	mutation *MedMakerMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (mmc *MedMakerCreate) SetName(s string) *MedMakerCreate {
	mmc.mutation.SetName(s)
	return mmc
}

// SetURL sets the "url" field.
func (mmc *MedMakerCreate) SetURL(s string) *MedMakerCreate {
	mmc.mutation.SetURL(s)
	return mmc
}

// SetFaviconURL sets the "favicon_url" field.
func (mmc *MedMakerCreate) SetFaviconURL(s string) *MedMakerCreate {
	mmc.mutation.SetFaviconURL(s)
	return mmc
}

// Mutation returns the MedMakerMutation object of the builder.
func (mmc *MedMakerCreate) Mutation() *MedMakerMutation {
	return mmc.mutation
}

// Save creates the MedMaker in the database.
func (mmc *MedMakerCreate) Save(ctx context.Context) (*MedMaker, error) {
	return withHooks(ctx, mmc.sqlSave, mmc.mutation, mmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mmc *MedMakerCreate) SaveX(ctx context.Context) *MedMaker {
	v, err := mmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mmc *MedMakerCreate) Exec(ctx context.Context) error {
	_, err := mmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mmc *MedMakerCreate) ExecX(ctx context.Context) {
	if err := mmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mmc *MedMakerCreate) check() error {
	if _, ok := mmc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "MedMaker.name"`)}
	}
	if _, ok := mmc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "MedMaker.url"`)}
	}
	if _, ok := mmc.mutation.FaviconURL(); !ok {
		return &ValidationError{Name: "favicon_url", err: errors.New(`ent: missing required field "MedMaker.favicon_url"`)}
	}
	return nil
}

func (mmc *MedMakerCreate) sqlSave(ctx context.Context) (*MedMaker, error) {
	if err := mmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	mmc.mutation.id = &_node.ID
	mmc.mutation.done = true
	return _node, nil
}

func (mmc *MedMakerCreate) createSpec() (*MedMaker, *sqlgraph.CreateSpec) {
	var (
		_node = &MedMaker{config: mmc.config}
		_spec = sqlgraph.NewCreateSpec(medmaker.Table, sqlgraph.NewFieldSpec(medmaker.FieldID, field.TypeInt))
	)
	if value, ok := mmc.mutation.Name(); ok {
		_spec.SetField(medmaker.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := mmc.mutation.URL(); ok {
		_spec.SetField(medmaker.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := mmc.mutation.FaviconURL(); ok {
		_spec.SetField(medmaker.FieldFaviconURL, field.TypeString, value)
		_node.FaviconURL = value
	}
	return _node, _spec
}

// MedMakerCreateBulk is the builder for creating many MedMaker entities in bulk.
type MedMakerCreateBulk struct {
	config
	err      error
	builders []*MedMakerCreate
}

// Save creates the MedMaker entities in the database.
func (mmcb *MedMakerCreateBulk) Save(ctx context.Context) ([]*MedMaker, error) {
	if mmcb.err != nil {
		return nil, mmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mmcb.builders))
	nodes := make([]*MedMaker, len(mmcb.builders))
	mutators := make([]Mutator, len(mmcb.builders))
	for i := range mmcb.builders {
		func(i int, root context.Context) {
			builder := mmcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MedMakerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mmcb *MedMakerCreateBulk) SaveX(ctx context.Context) []*MedMaker {
	v, err := mmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mmcb *MedMakerCreateBulk) Exec(ctx context.Context) error {
	_, err := mmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mmcb *MedMakerCreateBulk) ExecX(ctx context.Context) {
	if err := mmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
