// Code generated by ent, DO NOT EDIT.

package medsupply

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the medsupply type in the database.
	Label = "med_supply"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDoseForm holds the string denoting the dose_form field in the database.
	FieldDoseForm = "dose_form"
	// FieldGenericName holds the string denoting the generic_name field in the database.
	FieldGenericName = "generic_name"
	// FieldUnit holds the string denoting the unit field in the database.
	FieldUnit = "unit"
	// FieldYjCode holds the string denoting the yj_code field in the database.
	FieldYjCode = "yj_code"
	// FieldYjBase holds the string denoting the yj_base field in the database.
	FieldYjBase = "yj_base"
	// FieldMaker holds the string denoting the maker field in the database.
	FieldMaker = "maker"
	// FieldBrandName holds the string denoting the brand_name field in the database.
	FieldBrandName = "brand_name"
	// FieldSalesCategory holds the string denoting the sales_category field in the database.
	FieldSalesCategory = "sales_category"
	// FieldShipmentStatus holds the string denoting the shipment_status field in the database.
	FieldShipmentStatus = "shipment_status"
	// FieldSupplyStatus holds the string denoting the supply_status field in the database.
	FieldSupplyStatus = "supply_status"
	// FieldExpectLiftingStatus holds the string denoting the expect_lifting_status field in the database.
	FieldExpectLiftingStatus = "expect_lifting_status"
	// FieldExpectLiftingDescription holds the string denoting the expect_lifting_description field in the database.
	FieldExpectLiftingDescription = "expect_lifting_description"
	// FieldReason holds the string denoting the reason field in the database.
	FieldReason = "reason"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the medsupply in the database.
	Table = "med_supplies"
)

// Columns holds all SQL columns for medsupply fields.
var Columns = []string{
	FieldID,
	FieldDoseForm,
	FieldGenericName,
	FieldUnit,
	FieldYjCode,
	FieldYjBase,
	FieldMaker,
	FieldBrandName,
	FieldSalesCategory,
	FieldShipmentStatus,
	FieldSupplyStatus,
	FieldExpectLiftingStatus,
	FieldExpectLiftingDescription,
	FieldReason,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the MedSupply queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDoseForm orders the results by the dose_form field.
func ByDoseForm(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDoseForm, opts...).ToFunc()
}

// ByGenericName orders the results by the generic_name field.
func ByGenericName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGenericName, opts...).ToFunc()
}

// ByUnit orders the results by the unit field.
func ByUnit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnit, opts...).ToFunc()
}

// ByYjCode orders the results by the yj_code field.
func ByYjCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldYjCode, opts...).ToFunc()
}

// ByYjBase orders the results by the yj_base field.
func ByYjBase(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldYjBase, opts...).ToFunc()
}

// ByMaker orders the results by the maker field.
func ByMaker(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaker, opts...).ToFunc()
}

// ByBrandName orders the results by the brand_name field.
func ByBrandName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBrandName, opts...).ToFunc()
}

// BySalesCategory orders the results by the sales_category field.
func BySalesCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSalesCategory, opts...).ToFunc()
}

// ByShipmentStatus orders the results by the shipment_status field.
func ByShipmentStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShipmentStatus, opts...).ToFunc()
}

// BySupplyStatus orders the results by the supply_status field.
func BySupplyStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSupplyStatus, opts...).ToFunc()
}

// ByExpectLiftingStatus orders the results by the expect_lifting_status field.
func ByExpectLiftingStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpectLiftingStatus, opts...).ToFunc()
}

// ByExpectLiftingDescription orders the results by the expect_lifting_description field.
func ByExpectLiftingDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpectLiftingDescription, opts...).ToFunc()
}

// ByReason orders the results by the reason field.
func ByReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReason, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
