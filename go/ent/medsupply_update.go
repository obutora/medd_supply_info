// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/obutora/med_supply_info/ent/medsupply"
	"github.com/obutora/med_supply_info/ent/predicate"
)

// MedSupplyUpdate is the builder for updating MedSupply entities.
type MedSupplyUpdate struct {
	config
	hooks    []Hook
	mutation *MedSupplyMutation
}

// Where appends a list predicates to the MedSupplyUpdate builder.
func (msu *MedSupplyUpdate) Where(ps ...predicate.MedSupply) *MedSupplyUpdate {
	msu.mutation.Where(ps...)
	return msu
}

// SetDoseForm sets the "dose_form" field.
func (msu *MedSupplyUpdate) SetDoseForm(s string) *MedSupplyUpdate {
	msu.mutation.SetDoseForm(s)
	return msu
}

// SetNillableDoseForm sets the "dose_form" field if the given value is not nil.
func (msu *MedSupplyUpdate) SetNillableDoseForm(s *string) *MedSupplyUpdate {
	if s != nil {
		msu.SetDoseForm(*s)
	}
	return msu
}

// SetGenericName sets the "generic_name" field.
func (msu *MedSupplyUpdate) SetGenericName(s string) *MedSupplyUpdate {
	msu.mutation.SetGenericName(s)
	return msu
}

// SetNillableGenericName sets the "generic_name" field if the given value is not nil.
func (msu *MedSupplyUpdate) SetNillableGenericName(s *string) *MedSupplyUpdate {
	if s != nil {
		msu.SetGenericName(*s)
	}
	return msu
}

// SetUnit sets the "unit" field.
func (msu *MedSupplyUpdate) SetUnit(s string) *MedSupplyUpdate {
	msu.mutation.SetUnit(s)
	return msu
}

// SetNillableUnit sets the "unit" field if the given value is not nil.
func (msu *MedSupplyUpdate) SetNillableUnit(s *string) *MedSupplyUpdate {
	if s != nil {
		msu.SetUnit(*s)
	}
	return msu
}

// SetYjCode sets the "yj_code" field.
func (msu *MedSupplyUpdate) SetYjCode(s string) *MedSupplyUpdate {
	msu.mutation.SetYjCode(s)
	return msu
}

// SetNillableYjCode sets the "yj_code" field if the given value is not nil.
func (msu *MedSupplyUpdate) SetNillableYjCode(s *string) *MedSupplyUpdate {
	if s != nil {
		msu.SetYjCode(*s)
	}
	return msu
}

// SetYjBase sets the "yj_base" field.
func (msu *MedSupplyUpdate) SetYjBase(i int) *MedSupplyUpdate {
	msu.mutation.ResetYjBase()
	msu.mutation.SetYjBase(i)
	return msu
}

// SetNillableYjBase sets the "yj_base" field if the given value is not nil.
func (msu *MedSupplyUpdate) SetNillableYjBase(i *int) *MedSupplyUpdate {
	if i != nil {
		msu.SetYjBase(*i)
	}
	return msu
}

// AddYjBase adds i to the "yj_base" field.
func (msu *MedSupplyUpdate) AddYjBase(i int) *MedSupplyUpdate {
	msu.mutation.AddYjBase(i)
	return msu
}

// SetMaker sets the "maker" field.
func (msu *MedSupplyUpdate) SetMaker(s string) *MedSupplyUpdate {
	msu.mutation.SetMaker(s)
	return msu
}

// SetNillableMaker sets the "maker" field if the given value is not nil.
func (msu *MedSupplyUpdate) SetNillableMaker(s *string) *MedSupplyUpdate {
	if s != nil {
		msu.SetMaker(*s)
	}
	return msu
}

// SetBrandName sets the "brand_name" field.
func (msu *MedSupplyUpdate) SetBrandName(s string) *MedSupplyUpdate {
	msu.mutation.SetBrandName(s)
	return msu
}

// SetNillableBrandName sets the "brand_name" field if the given value is not nil.
func (msu *MedSupplyUpdate) SetNillableBrandName(s *string) *MedSupplyUpdate {
	if s != nil {
		msu.SetBrandName(*s)
	}
	return msu
}

// SetSalesCategory sets the "sales_category" field.
func (msu *MedSupplyUpdate) SetSalesCategory(s string) *MedSupplyUpdate {
	msu.mutation.SetSalesCategory(s)
	return msu
}

// SetNillableSalesCategory sets the "sales_category" field if the given value is not nil.
func (msu *MedSupplyUpdate) SetNillableSalesCategory(s *string) *MedSupplyUpdate {
	if s != nil {
		msu.SetSalesCategory(*s)
	}
	return msu
}

// SetShipmentStatus sets the "shipment_status" field.
func (msu *MedSupplyUpdate) SetShipmentStatus(s string) *MedSupplyUpdate {
	msu.mutation.SetShipmentStatus(s)
	return msu
}

// SetNillableShipmentStatus sets the "shipment_status" field if the given value is not nil.
func (msu *MedSupplyUpdate) SetNillableShipmentStatus(s *string) *MedSupplyUpdate {
	if s != nil {
		msu.SetShipmentStatus(*s)
	}
	return msu
}

// SetSupplyStatus sets the "supply_status" field.
func (msu *MedSupplyUpdate) SetSupplyStatus(s string) *MedSupplyUpdate {
	msu.mutation.SetSupplyStatus(s)
	return msu
}

// SetNillableSupplyStatus sets the "supply_status" field if the given value is not nil.
func (msu *MedSupplyUpdate) SetNillableSupplyStatus(s *string) *MedSupplyUpdate {
	if s != nil {
		msu.SetSupplyStatus(*s)
	}
	return msu
}

// SetExpectLiftingStatus sets the "expect_lifting_status" field.
func (msu *MedSupplyUpdate) SetExpectLiftingStatus(s string) *MedSupplyUpdate {
	msu.mutation.SetExpectLiftingStatus(s)
	return msu
}

// SetNillableExpectLiftingStatus sets the "expect_lifting_status" field if the given value is not nil.
func (msu *MedSupplyUpdate) SetNillableExpectLiftingStatus(s *string) *MedSupplyUpdate {
	if s != nil {
		msu.SetExpectLiftingStatus(*s)
	}
	return msu
}

// SetExpectLiftingDescription sets the "expect_lifting_description" field.
func (msu *MedSupplyUpdate) SetExpectLiftingDescription(s string) *MedSupplyUpdate {
	msu.mutation.SetExpectLiftingDescription(s)
	return msu
}

// SetNillableExpectLiftingDescription sets the "expect_lifting_description" field if the given value is not nil.
func (msu *MedSupplyUpdate) SetNillableExpectLiftingDescription(s *string) *MedSupplyUpdate {
	if s != nil {
		msu.SetExpectLiftingDescription(*s)
	}
	return msu
}

// SetReason sets the "reason" field.
func (msu *MedSupplyUpdate) SetReason(s string) *MedSupplyUpdate {
	msu.mutation.SetReason(s)
	return msu
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (msu *MedSupplyUpdate) SetNillableReason(s *string) *MedSupplyUpdate {
	if s != nil {
		msu.SetReason(*s)
	}
	return msu
}

// SetUpdatedAt sets the "updated_at" field.
func (msu *MedSupplyUpdate) SetUpdatedAt(t time.Time) *MedSupplyUpdate {
	msu.mutation.SetUpdatedAt(t)
	return msu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (msu *MedSupplyUpdate) SetNillableUpdatedAt(t *time.Time) *MedSupplyUpdate {
	if t != nil {
		msu.SetUpdatedAt(*t)
	}
	return msu
}

// Mutation returns the MedSupplyMutation object of the builder.
func (msu *MedSupplyUpdate) Mutation() *MedSupplyMutation {
	return msu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (msu *MedSupplyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, msu.sqlSave, msu.mutation, msu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (msu *MedSupplyUpdate) SaveX(ctx context.Context) int {
	affected, err := msu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (msu *MedSupplyUpdate) Exec(ctx context.Context) error {
	_, err := msu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (msu *MedSupplyUpdate) ExecX(ctx context.Context) {
	if err := msu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (msu *MedSupplyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(medsupply.Table, medsupply.Columns, sqlgraph.NewFieldSpec(medsupply.FieldID, field.TypeInt))
	if ps := msu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := msu.mutation.DoseForm(); ok {
		_spec.SetField(medsupply.FieldDoseForm, field.TypeString, value)
	}
	if value, ok := msu.mutation.GenericName(); ok {
		_spec.SetField(medsupply.FieldGenericName, field.TypeString, value)
	}
	if value, ok := msu.mutation.Unit(); ok {
		_spec.SetField(medsupply.FieldUnit, field.TypeString, value)
	}
	if value, ok := msu.mutation.YjCode(); ok {
		_spec.SetField(medsupply.FieldYjCode, field.TypeString, value)
	}
	if value, ok := msu.mutation.YjBase(); ok {
		_spec.SetField(medsupply.FieldYjBase, field.TypeInt, value)
	}
	if value, ok := msu.mutation.AddedYjBase(); ok {
		_spec.AddField(medsupply.FieldYjBase, field.TypeInt, value)
	}
	if value, ok := msu.mutation.Maker(); ok {
		_spec.SetField(medsupply.FieldMaker, field.TypeString, value)
	}
	if value, ok := msu.mutation.BrandName(); ok {
		_spec.SetField(medsupply.FieldBrandName, field.TypeString, value)
	}
	if value, ok := msu.mutation.SalesCategory(); ok {
		_spec.SetField(medsupply.FieldSalesCategory, field.TypeString, value)
	}
	if value, ok := msu.mutation.ShipmentStatus(); ok {
		_spec.SetField(medsupply.FieldShipmentStatus, field.TypeString, value)
	}
	if value, ok := msu.mutation.SupplyStatus(); ok {
		_spec.SetField(medsupply.FieldSupplyStatus, field.TypeString, value)
	}
	if value, ok := msu.mutation.ExpectLiftingStatus(); ok {
		_spec.SetField(medsupply.FieldExpectLiftingStatus, field.TypeString, value)
	}
	if value, ok := msu.mutation.ExpectLiftingDescription(); ok {
		_spec.SetField(medsupply.FieldExpectLiftingDescription, field.TypeString, value)
	}
	if value, ok := msu.mutation.Reason(); ok {
		_spec.SetField(medsupply.FieldReason, field.TypeString, value)
	}
	if value, ok := msu.mutation.UpdatedAt(); ok {
		_spec.SetField(medsupply.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, msu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{medsupply.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	msu.mutation.done = true
	return n, nil
}

// MedSupplyUpdateOne is the builder for updating a single MedSupply entity.
type MedSupplyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MedSupplyMutation
}

// SetDoseForm sets the "dose_form" field.
func (msuo *MedSupplyUpdateOne) SetDoseForm(s string) *MedSupplyUpdateOne {
	msuo.mutation.SetDoseForm(s)
	return msuo
}

// SetNillableDoseForm sets the "dose_form" field if the given value is not nil.
func (msuo *MedSupplyUpdateOne) SetNillableDoseForm(s *string) *MedSupplyUpdateOne {
	if s != nil {
		msuo.SetDoseForm(*s)
	}
	return msuo
}

// SetGenericName sets the "generic_name" field.
func (msuo *MedSupplyUpdateOne) SetGenericName(s string) *MedSupplyUpdateOne {
	msuo.mutation.SetGenericName(s)
	return msuo
}

// SetNillableGenericName sets the "generic_name" field if the given value is not nil.
func (msuo *MedSupplyUpdateOne) SetNillableGenericName(s *string) *MedSupplyUpdateOne {
	if s != nil {
		msuo.SetGenericName(*s)
	}
	return msuo
}

// SetUnit sets the "unit" field.
func (msuo *MedSupplyUpdateOne) SetUnit(s string) *MedSupplyUpdateOne {
	msuo.mutation.SetUnit(s)
	return msuo
}

// SetNillableUnit sets the "unit" field if the given value is not nil.
func (msuo *MedSupplyUpdateOne) SetNillableUnit(s *string) *MedSupplyUpdateOne {
	if s != nil {
		msuo.SetUnit(*s)
	}
	return msuo
}

// SetYjCode sets the "yj_code" field.
func (msuo *MedSupplyUpdateOne) SetYjCode(s string) *MedSupplyUpdateOne {
	msuo.mutation.SetYjCode(s)
	return msuo
}

// SetNillableYjCode sets the "yj_code" field if the given value is not nil.
func (msuo *MedSupplyUpdateOne) SetNillableYjCode(s *string) *MedSupplyUpdateOne {
	if s != nil {
		msuo.SetYjCode(*s)
	}
	return msuo
}

// SetYjBase sets the "yj_base" field.
func (msuo *MedSupplyUpdateOne) SetYjBase(i int) *MedSupplyUpdateOne {
	msuo.mutation.ResetYjBase()
	msuo.mutation.SetYjBase(i)
	return msuo
}

// SetNillableYjBase sets the "yj_base" field if the given value is not nil.
func (msuo *MedSupplyUpdateOne) SetNillableYjBase(i *int) *MedSupplyUpdateOne {
	if i != nil {
		msuo.SetYjBase(*i)
	}
	return msuo
}

// AddYjBase adds i to the "yj_base" field.
func (msuo *MedSupplyUpdateOne) AddYjBase(i int) *MedSupplyUpdateOne {
	msuo.mutation.AddYjBase(i)
	return msuo
}

// SetMaker sets the "maker" field.
func (msuo *MedSupplyUpdateOne) SetMaker(s string) *MedSupplyUpdateOne {
	msuo.mutation.SetMaker(s)
	return msuo
}

// SetNillableMaker sets the "maker" field if the given value is not nil.
func (msuo *MedSupplyUpdateOne) SetNillableMaker(s *string) *MedSupplyUpdateOne {
	if s != nil {
		msuo.SetMaker(*s)
	}
	return msuo
}

// SetBrandName sets the "brand_name" field.
func (msuo *MedSupplyUpdateOne) SetBrandName(s string) *MedSupplyUpdateOne {
	msuo.mutation.SetBrandName(s)
	return msuo
}

// SetNillableBrandName sets the "brand_name" field if the given value is not nil.
func (msuo *MedSupplyUpdateOne) SetNillableBrandName(s *string) *MedSupplyUpdateOne {
	if s != nil {
		msuo.SetBrandName(*s)
	}
	return msuo
}

// SetSalesCategory sets the "sales_category" field.
func (msuo *MedSupplyUpdateOne) SetSalesCategory(s string) *MedSupplyUpdateOne {
	msuo.mutation.SetSalesCategory(s)
	return msuo
}

// SetNillableSalesCategory sets the "sales_category" field if the given value is not nil.
func (msuo *MedSupplyUpdateOne) SetNillableSalesCategory(s *string) *MedSupplyUpdateOne {
	if s != nil {
		msuo.SetSalesCategory(*s)
	}
	return msuo
}

// SetShipmentStatus sets the "shipment_status" field.
func (msuo *MedSupplyUpdateOne) SetShipmentStatus(s string) *MedSupplyUpdateOne {
	msuo.mutation.SetShipmentStatus(s)
	return msuo
}

// SetNillableShipmentStatus sets the "shipment_status" field if the given value is not nil.
func (msuo *MedSupplyUpdateOne) SetNillableShipmentStatus(s *string) *MedSupplyUpdateOne {
	if s != nil {
		msuo.SetShipmentStatus(*s)
	}
	return msuo
}

// SetSupplyStatus sets the "supply_status" field.
func (msuo *MedSupplyUpdateOne) SetSupplyStatus(s string) *MedSupplyUpdateOne {
	msuo.mutation.SetSupplyStatus(s)
	return msuo
}

// SetNillableSupplyStatus sets the "supply_status" field if the given value is not nil.
func (msuo *MedSupplyUpdateOne) SetNillableSupplyStatus(s *string) *MedSupplyUpdateOne {
	if s != nil {
		msuo.SetSupplyStatus(*s)
	}
	return msuo
}

// SetExpectLiftingStatus sets the "expect_lifting_status" field.
func (msuo *MedSupplyUpdateOne) SetExpectLiftingStatus(s string) *MedSupplyUpdateOne {
	msuo.mutation.SetExpectLiftingStatus(s)
	return msuo
}

// SetNillableExpectLiftingStatus sets the "expect_lifting_status" field if the given value is not nil.
func (msuo *MedSupplyUpdateOne) SetNillableExpectLiftingStatus(s *string) *MedSupplyUpdateOne {
	if s != nil {
		msuo.SetExpectLiftingStatus(*s)
	}
	return msuo
}

// SetExpectLiftingDescription sets the "expect_lifting_description" field.
func (msuo *MedSupplyUpdateOne) SetExpectLiftingDescription(s string) *MedSupplyUpdateOne {
	msuo.mutation.SetExpectLiftingDescription(s)
	return msuo
}

// SetNillableExpectLiftingDescription sets the "expect_lifting_description" field if the given value is not nil.
func (msuo *MedSupplyUpdateOne) SetNillableExpectLiftingDescription(s *string) *MedSupplyUpdateOne {
	if s != nil {
		msuo.SetExpectLiftingDescription(*s)
	}
	return msuo
}

// SetReason sets the "reason" field.
func (msuo *MedSupplyUpdateOne) SetReason(s string) *MedSupplyUpdateOne {
	msuo.mutation.SetReason(s)
	return msuo
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (msuo *MedSupplyUpdateOne) SetNillableReason(s *string) *MedSupplyUpdateOne {
	if s != nil {
		msuo.SetReason(*s)
	}
	return msuo
}

// SetUpdatedAt sets the "updated_at" field.
func (msuo *MedSupplyUpdateOne) SetUpdatedAt(t time.Time) *MedSupplyUpdateOne {
	msuo.mutation.SetUpdatedAt(t)
	return msuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (msuo *MedSupplyUpdateOne) SetNillableUpdatedAt(t *time.Time) *MedSupplyUpdateOne {
	if t != nil {
		msuo.SetUpdatedAt(*t)
	}
	return msuo
}

// Mutation returns the MedSupplyMutation object of the builder.
func (msuo *MedSupplyUpdateOne) Mutation() *MedSupplyMutation {
	return msuo.mutation
}

// Where appends a list predicates to the MedSupplyUpdate builder.
func (msuo *MedSupplyUpdateOne) Where(ps ...predicate.MedSupply) *MedSupplyUpdateOne {
	msuo.mutation.Where(ps...)
	return msuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (msuo *MedSupplyUpdateOne) Select(field string, fields ...string) *MedSupplyUpdateOne {
	msuo.fields = append([]string{field}, fields...)
	return msuo
}

// Save executes the query and returns the updated MedSupply entity.
func (msuo *MedSupplyUpdateOne) Save(ctx context.Context) (*MedSupply, error) {
	return withHooks(ctx, msuo.sqlSave, msuo.mutation, msuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (msuo *MedSupplyUpdateOne) SaveX(ctx context.Context) *MedSupply {
	node, err := msuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (msuo *MedSupplyUpdateOne) Exec(ctx context.Context) error {
	_, err := msuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (msuo *MedSupplyUpdateOne) ExecX(ctx context.Context) {
	if err := msuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (msuo *MedSupplyUpdateOne) sqlSave(ctx context.Context) (_node *MedSupply, err error) {
	_spec := sqlgraph.NewUpdateSpec(medsupply.Table, medsupply.Columns, sqlgraph.NewFieldSpec(medsupply.FieldID, field.TypeInt))
	id, ok := msuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MedSupply.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := msuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, medsupply.FieldID)
		for _, f := range fields {
			if !medsupply.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != medsupply.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := msuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := msuo.mutation.DoseForm(); ok {
		_spec.SetField(medsupply.FieldDoseForm, field.TypeString, value)
	}
	if value, ok := msuo.mutation.GenericName(); ok {
		_spec.SetField(medsupply.FieldGenericName, field.TypeString, value)
	}
	if value, ok := msuo.mutation.Unit(); ok {
		_spec.SetField(medsupply.FieldUnit, field.TypeString, value)
	}
	if value, ok := msuo.mutation.YjCode(); ok {
		_spec.SetField(medsupply.FieldYjCode, field.TypeString, value)
	}
	if value, ok := msuo.mutation.YjBase(); ok {
		_spec.SetField(medsupply.FieldYjBase, field.TypeInt, value)
	}
	if value, ok := msuo.mutation.AddedYjBase(); ok {
		_spec.AddField(medsupply.FieldYjBase, field.TypeInt, value)
	}
	if value, ok := msuo.mutation.Maker(); ok {
		_spec.SetField(medsupply.FieldMaker, field.TypeString, value)
	}
	if value, ok := msuo.mutation.BrandName(); ok {
		_spec.SetField(medsupply.FieldBrandName, field.TypeString, value)
	}
	if value, ok := msuo.mutation.SalesCategory(); ok {
		_spec.SetField(medsupply.FieldSalesCategory, field.TypeString, value)
	}
	if value, ok := msuo.mutation.ShipmentStatus(); ok {
		_spec.SetField(medsupply.FieldShipmentStatus, field.TypeString, value)
	}
	if value, ok := msuo.mutation.SupplyStatus(); ok {
		_spec.SetField(medsupply.FieldSupplyStatus, field.TypeString, value)
	}
	if value, ok := msuo.mutation.ExpectLiftingStatus(); ok {
		_spec.SetField(medsupply.FieldExpectLiftingStatus, field.TypeString, value)
	}
	if value, ok := msuo.mutation.ExpectLiftingDescription(); ok {
		_spec.SetField(medsupply.FieldExpectLiftingDescription, field.TypeString, value)
	}
	if value, ok := msuo.mutation.Reason(); ok {
		_spec.SetField(medsupply.FieldReason, field.TypeString, value)
	}
	if value, ok := msuo.mutation.UpdatedAt(); ok {
		_spec.SetField(medsupply.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &MedSupply{config: msuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, msuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{medsupply.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	msuo.mutation.done = true
	return _node, nil
}
