// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/obutora/med_supply_info/ent/medsupply"
)

// MedSupply is the model entity for the MedSupply schema.
type MedSupply struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// DoseForm holds the value of the "dose_form" field.
	DoseForm string `json:"dose_form,omitempty"`
	// GenericName holds the value of the "generic_name" field.
	GenericName string `json:"generic_name,omitempty"`
	// Unit holds the value of the "unit" field.
	Unit string `json:"unit,omitempty"`
	// YjCode holds the value of the "yj_code" field.
	YjCode string `json:"yj_code,omitempty"`
	// YjBase holds the value of the "yj_base" field.
	YjBase int `json:"yj_base,omitempty"`
	// Maker holds the value of the "maker" field.
	Maker string `json:"maker,omitempty"`
	// BrandName holds the value of the "brand_name" field.
	BrandName string `json:"brand_name,omitempty"`
	// SalesCategory holds the value of the "sales_category" field.
	SalesCategory string `json:"sales_category,omitempty"`
	// ShipmentStatus holds the value of the "shipment_status" field.
	ShipmentStatus string `json:"shipment_status,omitempty"`
	// SupplyStatus holds the value of the "supply_status" field.
	SupplyStatus string `json:"supply_status,omitempty"`
	// ExpectLiftingStatus holds the value of the "expect_lifting_status" field.
	ExpectLiftingStatus string `json:"expect_lifting_status,omitempty"`
	// ExpectLiftingDescription holds the value of the "expect_lifting_description" field.
	ExpectLiftingDescription string `json:"expect_lifting_description,omitempty"`
	// Reason holds the value of the "reason" field.
	Reason string `json:"reason,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MedSupply) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case medsupply.FieldID, medsupply.FieldYjBase:
			values[i] = new(sql.NullInt64)
		case medsupply.FieldDoseForm, medsupply.FieldGenericName, medsupply.FieldUnit, medsupply.FieldYjCode, medsupply.FieldMaker, medsupply.FieldBrandName, medsupply.FieldSalesCategory, medsupply.FieldShipmentStatus, medsupply.FieldSupplyStatus, medsupply.FieldExpectLiftingStatus, medsupply.FieldExpectLiftingDescription, medsupply.FieldReason:
			values[i] = new(sql.NullString)
		case medsupply.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MedSupply fields.
func (ms *MedSupply) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case medsupply.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ms.ID = int(value.Int64)
		case medsupply.FieldDoseForm:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dose_form", values[i])
			} else if value.Valid {
				ms.DoseForm = value.String
			}
		case medsupply.FieldGenericName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field generic_name", values[i])
			} else if value.Valid {
				ms.GenericName = value.String
			}
		case medsupply.FieldUnit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field unit", values[i])
			} else if value.Valid {
				ms.Unit = value.String
			}
		case medsupply.FieldYjCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field yj_code", values[i])
			} else if value.Valid {
				ms.YjCode = value.String
			}
		case medsupply.FieldYjBase:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field yj_base", values[i])
			} else if value.Valid {
				ms.YjBase = int(value.Int64)
			}
		case medsupply.FieldMaker:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field maker", values[i])
			} else if value.Valid {
				ms.Maker = value.String
			}
		case medsupply.FieldBrandName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field brand_name", values[i])
			} else if value.Valid {
				ms.BrandName = value.String
			}
		case medsupply.FieldSalesCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sales_category", values[i])
			} else if value.Valid {
				ms.SalesCategory = value.String
			}
		case medsupply.FieldShipmentStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shipment_status", values[i])
			} else if value.Valid {
				ms.ShipmentStatus = value.String
			}
		case medsupply.FieldSupplyStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field supply_status", values[i])
			} else if value.Valid {
				ms.SupplyStatus = value.String
			}
		case medsupply.FieldExpectLiftingStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field expect_lifting_status", values[i])
			} else if value.Valid {
				ms.ExpectLiftingStatus = value.String
			}
		case medsupply.FieldExpectLiftingDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field expect_lifting_description", values[i])
			} else if value.Valid {
				ms.ExpectLiftingDescription = value.String
			}
		case medsupply.FieldReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reason", values[i])
			} else if value.Valid {
				ms.Reason = value.String
			}
		case medsupply.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ms.UpdatedAt = value.Time
			}
		default:
			ms.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MedSupply.
// This includes values selected through modifiers, order, etc.
func (ms *MedSupply) Value(name string) (ent.Value, error) {
	return ms.selectValues.Get(name)
}

// Update returns a builder for updating this MedSupply.
// Note that you need to call MedSupply.Unwrap() before calling this method if this MedSupply
// was returned from a transaction, and the transaction was committed or rolled back.
func (ms *MedSupply) Update() *MedSupplyUpdateOne {
	return NewMedSupplyClient(ms.config).UpdateOne(ms)
}

// Unwrap unwraps the MedSupply entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ms *MedSupply) Unwrap() *MedSupply {
	_tx, ok := ms.config.driver.(*txDriver)
	if !ok {
		panic("ent: MedSupply is not a transactional entity")
	}
	ms.config.driver = _tx.drv
	return ms
}

// String implements the fmt.Stringer.
func (ms *MedSupply) String() string {
	var builder strings.Builder
	builder.WriteString("MedSupply(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ms.ID))
	builder.WriteString("dose_form=")
	builder.WriteString(ms.DoseForm)
	builder.WriteString(", ")
	builder.WriteString("generic_name=")
	builder.WriteString(ms.GenericName)
	builder.WriteString(", ")
	builder.WriteString("unit=")
	builder.WriteString(ms.Unit)
	builder.WriteString(", ")
	builder.WriteString("yj_code=")
	builder.WriteString(ms.YjCode)
	builder.WriteString(", ")
	builder.WriteString("yj_base=")
	builder.WriteString(fmt.Sprintf("%v", ms.YjBase))
	builder.WriteString(", ")
	builder.WriteString("maker=")
	builder.WriteString(ms.Maker)
	builder.WriteString(", ")
	builder.WriteString("brand_name=")
	builder.WriteString(ms.BrandName)
	builder.WriteString(", ")
	builder.WriteString("sales_category=")
	builder.WriteString(ms.SalesCategory)
	builder.WriteString(", ")
	builder.WriteString("shipment_status=")
	builder.WriteString(ms.ShipmentStatus)
	builder.WriteString(", ")
	builder.WriteString("supply_status=")
	builder.WriteString(ms.SupplyStatus)
	builder.WriteString(", ")
	builder.WriteString("expect_lifting_status=")
	builder.WriteString(ms.ExpectLiftingStatus)
	builder.WriteString(", ")
	builder.WriteString("expect_lifting_description=")
	builder.WriteString(ms.ExpectLiftingDescription)
	builder.WriteString(", ")
	builder.WriteString("reason=")
	builder.WriteString(ms.Reason)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ms.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// MedSupplies is a parsable slice of MedSupply.
type MedSupplies []*MedSupply
