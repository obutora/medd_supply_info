// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/obutora/med_supply_info/ent/medmaker"
)

// MedMaker is the model entity for the MedMaker schema.
type MedMaker struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// URL holds the value of the "url" field.
	URL          string `json:"url,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MedMaker) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case medmaker.FieldID:
			values[i] = new(sql.NullInt64)
		case medmaker.FieldName, medmaker.FieldURL:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MedMaker fields.
func (mm *MedMaker) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case medmaker.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mm.ID = int(value.Int64)
		case medmaker.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				mm.Name = value.String
			}
		case medmaker.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				mm.URL = value.String
			}
		default:
			mm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MedMaker.
// This includes values selected through modifiers, order, etc.
func (mm *MedMaker) Value(name string) (ent.Value, error) {
	return mm.selectValues.Get(name)
}

// Update returns a builder for updating this MedMaker.
// Note that you need to call MedMaker.Unwrap() before calling this method if this MedMaker
// was returned from a transaction, and the transaction was committed or rolled back.
func (mm *MedMaker) Update() *MedMakerUpdateOne {
	return NewMedMakerClient(mm.config).UpdateOne(mm)
}

// Unwrap unwraps the MedMaker entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mm *MedMaker) Unwrap() *MedMaker {
	_tx, ok := mm.config.driver.(*txDriver)
	if !ok {
		panic("ent: MedMaker is not a transactional entity")
	}
	mm.config.driver = _tx.drv
	return mm
}

// String implements the fmt.Stringer.
func (mm *MedMaker) String() string {
	var builder strings.Builder
	builder.WriteString("MedMaker(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mm.ID))
	builder.WriteString("name=")
	builder.WriteString(mm.Name)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(mm.URL)
	builder.WriteByte(')')
	return builder.String()
}

// MedMakers is a parsable slice of MedMaker.
type MedMakers []*MedMaker
